\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename tutorial.info
@settitle libpackedobjectsd tutorial
@c %**end of header

@copying
libpackedobjectsd - a light weight XML messaging framework
     
Copyright @copyright{} 2011 Jiva N. Bagale
@end copying

@titlepage
@title libpackedobjectsd tutorial
     
@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
     
@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top
@top libpackedobjects tutorial

libpackedobjectsd - a light weight XML messaging framework   
@end ifnottex

@menu
* Introduction::                Introduction
* Installation::                Installation
* Getting started::             Getting started
* Data types::                  Data types
* Index::                       Index
@end menu

@node Introduction
@chapter Introduction

@section What is libpackedobjectsd?
@cindex What is libpackedobjectsd

libpackedobjectsd is a light-weight XML messaging library. It is created using multiple publisher and subscriber model and built using libpackedobjects and ZeroMQ in C language. It is simple to implement and is suited to embedded systems and mobile devices. The library provides simple API to send and receive XML data to and from multiple nodes. The library connects all the nodes sending/receiving XML data using the same XML schema to one group. The data is also validated by the schema during the send and receive process.

@* @*
libpackedobjectsd is based on libpackedobjects, libxml2 and ZeroMQ and therefore should run on any system that libxml2 and ZeroMQ runs on. 

@section Key features
@cindex Key features

@itemize
@item
Light-weight and simple
@item
Validates XML data on send and receive
@item
Simple API with two main function calls
@item
Highly portable - designed for embedded and mobile devices
@item
Simple subset of XML Schema required to create protocols
@end itemize

@section Limitations
@cindex Limitations

todo

@node Installation
@chapter Installation

@section Installing packedobjectsd
@cindex Installing packedobjectsd

To install from the latest source:
@smallexample
git clone git://gitorious.org/libpackedobjectsd/libpackedobjectsd.git
cd libpackedobjectsd
autoreconf -i
./configure
make
make check
sudo make install
@end smallexample

@section Further reading
@cindex Further reading

@node Getting started
@chapter Getting started

@section Quick start
@cindex Quick start

After compiling and running 'make check' you should find a binary called 'packedobjectsdtest' in your src directory. This is command-line tool built with packedobjectsd which you can use to test out sending and receiving:
@*
@smallexample
$ ./packedobjectsdtest --help
usage: packedobjectsdtest --schema <file> --xml <file> 
@end smallexample
@noindent
To send and receive run:
@*
@smallexample
$ ./packedobjectsdtest --schema foo.xsd --xml foo.xml
@end smallexample

@section API basics
@cindex API basics

There are only 4 main function calls which are made available by adding @code{#include <packedobjectsd/packedobjectsd.h>} to your code.
@smallexample
packedobjectsdObject *init_packedobjectsd(const char *schema_file);
   
int packedobjectsd_send(packedobjectsdObject *pod_obj, xmlDocPtr doc);
   
xmlDocPtr packedobjectsd_receive(packedobjectsdObject *pod_obj);
   
void free_packedobjectsd(packedobjectsdObject *pod_obj);

@end smallexample
@noindent
You first must initialise the library using your XML Schema. Typical use would be one called to init_packedobjectsd at startup and then multiple calls to send/receive data. The interface to the packedobjectsd_send function requires a libxml2 doc type and returns number of bytes sent. The packedobjectsd_receive function returns a libxml2 doc type. 
@noindent
A very simple program demonstrating the API is as follows:
@smallformat
@verbatim

#include <stdio.h>
#include <unistd.h>      /* for sleep() */
#include <packedobjectsd/packedobjectsd.h>

#define XML_DATA "helloworld.xml"
#define XML_SCHEMA "helloworld.xsd"


int main ()
{
  packedobjectsdObject *pod_obj = NULL;
  xmlDocPtr doc_sent = NULL;
  xmlDocPtr doc_received = NULL;

  ///////////////////// Initialising ///////////////////

  /* Initialise packedobjectsd */

  if((pod_obj = init_packedobjectsd(XML_SCHEMA)) == NULL) {
    printf("failed to initialise libpackedobjectsd");
    exit(1);
  }
  
  sleep(1); /* Allow broker to start if it's not already running */
  
  ////////////////////// Sending XML data //////////////////////
 
  /* create an XML DOM */
  if((doc_sent = xml_new_doc(XML_DATA)) == NULL) {
    printf("did not find .xml file");
    exit(1);
  }

  /* send the XML DOM */
  if(packedobjectsd_send(pod_obj, doc_sent) == -1){
    printf("failed to send with error %s", pod_strerror(pod_obj->error_code));
    exit(1);
  }

  printf("size of the original xml: %d bytes\n", xml_doc_size(doc_sent));
  printf("size after the encoding: %d bytes\n", pod_obj->bytes_sent);
  /* free the XML DOM */
  xmlFreeDoc(doc_sent);
 
  ////////////////////// Receiving XML data //////////////////////
 
  if((doc_received = packedobjectsd_receive(pod_obj)) == NULL) {
    printf("failed to receive with error %s", pod_strerror(pod_obj->error_code));
    exit(1);
  }
  
  printf("size before the decoding: %d bytes\n", pod_obj->bytes_received);
  printf("size of the decoced xml: %d bytes \n", xml_doc_size(doc_received));

  /* output the DOM for checking */
  xml_dump_doc(doc_received);
  /* free the XML DOM */
  xmlFreeDoc(doc_received);

  ////////////////////// Freeing //////////////////////

  /* free memory created by packedobjectsd */
  free_packedobjectsd(pod_obj);

  return 0;
}

@end verbatim
@end smallformat

@noindent
helloworld.xsd
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://zedstar.org/xml/schema/packedobjectsDataTypes.xsd"/>
              <xs:element name="foo" type="string"/>
</xs:schema>  
@end smallexample

@noindent
helloworld.xml
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<foo>Hello World!</foo> 
@end smallexample

    
If during runtime your schema changed you must call the init function again with the new file. The library is designed to communicate to the server during the init function which gives it back the network address and port numbers to send or receive the data. Therefore, do not call init_packedobjectsd more than once if you do not plan on supporting dynamically changing protocols at runtime.

To build an application with the software you must link with the library. Using autoconf you can add @code{PKG_CHECK_MODULES([LIBPACKEDOBJECTSD], [libpackedobjectsd])} to your configure.ac file and then use the variables @code{$(LIBPACKEDOBJECTSD_CFLAGS)} and @code{$(LIBPACKEDOBJECTSD_LIBS)} in your Makefile.am file.



@printindex cp
     
@bye
